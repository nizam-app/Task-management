import '../models/shift_model.dart';
import '../models/staff_model.dart';
import '../models/message_model.dart';

class MockData {
  static List<Shift> get shifts => [
    Shift(
      id: '1',
      facility: 'Mercy General Hospital',
      role: 'Registered Nurse',
      department: 'ICU',
      date: DateTime.now().add(const Duration(days: 1)),
      startTime: '07:00',
      endTime: '19:00',
      payRate: 45.0,
      status: ShiftStatus.available,
      urgency: ShiftUrgency.normal,
      distance: 2.1,
      matchScore: 95,
      requirements: ['BLS Certification', 'ACLS Certification', '2+ years ICU experience'],
      description: 'Looking for an experienced ICU nurse for a 12-hour day shift. Patient ratio 1:2.',
      benefits: ['Meal provided', 'Free parking', 'Premium rates'],
      facilityRating: 4.8,
      shiftNotes: 'Orientation provided for new staff',
    ),
    Shift(
      id: '2',
      facility: 'St. Mary\'s Medical Center',
      role: 'LPN',
      department: 'Med-Surg',
      date: DateTime.now().add(const Duration(days: 2)),
      startTime: '15:00',
      endTime: '23:00',
      payRate: 32.0,
      status: ShiftStatus.available,
      urgency: ShiftUrgency.urgent,
      distance: 4.3,
      matchScore: 88,
      requirements: ['Current LPN License', 'Med-Surg experience preferred'],
      description: 'Urgent need for evening shift LPN in our medical-surgical unit.',
      benefits: ['Shift differential', 'Free parking'],
      facilityRating: 4.6,
      shiftNotes: 'Last-minute cancellation - immediate need',
      applicants: 2,
    ),
    Shift(
      id: '3',
      facility: 'Valley Care Clinic',
      role: 'Medical Assistant',
      department: 'Clinic',
      date: DateTime.now().add(const Duration(days: 3)),
      startTime: '08:00',
      endTime: '17:00',
      payRate: 22.0,
      status: ShiftStatus.pending,
      urgency: ShiftUrgency.normal,
      distance: 1.8,
      matchScore: 92,
      requirements: ['Medical Assistant certification', 'EMR experience'],
      description: 'Day shift medical assistant needed for busy clinic.',
      benefits: ['Health insurance', 'Free parking'],
      facilityRating: 4.5,
      applicants: 5,
    ),
  ];

  static List<Staff> get staff => [
    Staff(
      id: '1',
      name: 'Sarah Martinez',
      role: 'Registered Nurse',
      specialties: ['ICU', 'Emergency'],
      rating: 4.9,
      totalShifts: 156,
      status: StaffStatus.active,
      credentialsStatus: CredentialStatus.verified,
      credentialsExpiring: 1,
      lastActive: DateTime.now().subtract(const Duration(hours: 2)),
      phone: '(555) 123-4567',
      email: 'sarah.martinez@email.com',
      avatar: 'SM',
    ),
    Staff(
      id: '2',
      name: 'Mike Rodriguez',
      role: 'LPN',
      specialties: ['Med-Surg', 'Pediatrics'],
      rating: 4.7,
      totalShifts: 89,
      status: StaffStatus.active,
      credentialsStatus: CredentialStatus.pending,
      credentialsExpiring: 0,
      lastActive: DateTime.now().subtract(const Duration(days: 1)),
      phone: '(555) 234-5678',
      email: 'mike.rodriguez@email.com',
      avatar: 'MR',
    ),
    Staff(
      id: '3',
      name: 'Jennifer Lee',
      role: 'Medical Assistant',
      specialties: ['Clinic', 'Admin'],
      rating: 4.8,
      totalShifts: 203,
      status: StaffStatus.inactive,
      credentialsStatus: CredentialStatus.expired,
      credentialsExpiring: 2,
      lastActive: DateTime.now().subtract(const Duration(days: 7)),
      phone: '(555) 345-6789',
      email: 'jennifer.lee@email.com',
      avatar: 'JL',
    ),
  ];

  static List<Credential> get credentials => [
    Credential(
      id: '1',
      name: 'RN License',
      status: CredentialStatus.verified,
      expiryDate: DateTime.now().add(const Duration(days: 210)),
      uploadDate: DateTime.now().subtract(const Duration(days: 150)),
      verified: true,
    ),
    Credential(
      id: '2',
      name: 'BLS Certification',
      status: CredentialStatus.expiring,
      expiryDate: DateTime.now().add(const Duration(days: 35)),
      uploadDate: DateTime.now().subtract(const Duration(days: 330)),
      verified: true,
    ),
    Credential(
      id: '3',
      name: 'ACLS Certification',
      status: CredentialStatus.verified,
      expiryDate: DateTime.now().add(const Duration(days: 147)),
      uploadDate: DateTime.now().subtract(const Duration(days: 218)),
      verified: true,
    ),
    Credential(
      id: '4',
      name: 'TB Test Results',
      status: CredentialStatus.pending,
      expiryDate: DateTime.now().add(const Duration(days: 14)),
      uploadDate: DateTime.now().subtract(const Duration(days: 1)),
      verified: false,
    ),
  ];

  static List<Conversation> get conversations => [
    Conversation(
      id: '1',
      name: 'Sarah Johnson',
      role: 'Facility Manager',
      facility: 'Mercy General Hospital',
      lastMessage: 'Your shift for tomorrow has been confirmed',
      timestamp: DateTime.now().subtract(const Duration(minutes: 30)),
      unreadCount: 2,
      avatar: 'SJ',
    ),
    Conversation(
      id: '2',
      name: 'ICU Team - Mercy General',
      role: 'Group Chat',
      facility: 'Mercy General Hospital',
      lastMessage: 'New protocols for patient care have been updated',
      timestamp: DateTime.now().subtract(const Duration(hours: 1, minutes: 15)),
      unreadCount: 0,
      isGroup: true,
      avatar: 'ICU',
      participants: 12,
    ),
    Conversation(
      id: '3',
      name: 'Mike Rodriguez',
      role: 'Scheduler',
      facility: 'St. Mary\'s Medical Center',
      lastMessage: 'Urgent shift available for this weekend',
      timestamp: DateTime.now().subtract(const Duration(hours: 2, minutes: 45)),
      unreadCount: 1,
      avatar: 'MR',
    ),
  ];

  static List<Message> getMessagesForConversation(String conversationId) {
    // Mock messages for demonstration
    return [
      Message(
        id: '1',
        content: 'Hi! Your shift for tomorrow has been confirmed. Please arrive 15 minutes early for orientation.',
        senderId: 'other',
        senderName: 'Sarah Johnson',
        timestamp: DateTime.now().subtract(const Duration(minutes: 35)),
        isOwn: false,
      ),
      Message(
        id: '2',
        content: 'Perfect, thank you! I\'ll be there at 6:45 AM.',
        senderId: 'current_user',
        senderName: 'You',
        timestamp: DateTime.now().subtract(const Duration(minutes: 32)),
        isOwn: true,
      ),
      Message(
        id: '3',
        content: 'Great! Don\'t forget to bring your updated BLS certification.',
        senderId: 'other',
        senderName: 'Sarah Johnson',
        timestamp: DateTime.now().subtract(const Duration(minutes: 30)),
        isOwn: false,
      ),
    ];
  }
}